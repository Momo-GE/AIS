<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="All-in Signing Service" resourceRoot="${projectDir}" soapui-version="4.6.4" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:description>Swisscom All-in Signing Service</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="Regression Test Suite"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.LoadTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="Benchmark"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value="C:\Program Files\SmartBear\SoapUI-4.6.4/bin"/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="LoadTest" value="&lt;all>"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Print Report Statistics" value="true"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="Z:\Temp\loadtest"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="ThreadCount" value=""/>
  <con:entry key="Limit" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="AisSoapBinding" type="wsdl" bindingName="{http://server.ais.swisscom.com/}AisServiceSoapBinding" soapVersion="1_1" anonymous="optional" definition="../services/wsdl/aisService.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:endpoints><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:endpoint>https://ais.pre.swissdigicert.ch/AIS-Server/ws</con:endpoint><con:endpoint>https://ais.swisscom.com/AIS-Server/ws</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="pending" bindingOperationName="pending" type="Request-Response" outputName="pendingResponse" inputName="pending" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="" name="sign" bindingOperationName="sign" type="Request-Response" outputName="signResponse" inputName="sign" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AIS RESTful" type="rest" basePath="/AIS-Server/rs" definitionUrl="..\services\wadl\aisService.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.rest.actions.service.Wadl2JavaAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Java Args" value=""/>
  <con:entry key="Output Directory" value=""/>
  <con:entry key="Package" value=""/>
  <con:entry key="JAXB Customization File(s)" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Automatic Package Names" value="false"/>
</xml-fragment>]]></con:setting></con:settings><con:endpoints><con:endpoint>${#TestSuite#BASEURL}</con:endpoint><con:endpoint>https://ais.pre.swissdigicert.ch</con:endpoint><con:endpoint>https://ais.swisscom.com</con:endpoint></con:endpoints><con:resource name="/v1.0" path="/v1.0"><con:settings/><con:parameters/><con:resource name="/pending" path="/pending"><con:settings/><con:parameters><con:parameter><con:name>Accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:resource><con:resource name="/sign" path="/sign"><con:settings/><con:parameters><con:parameter><con:name>Accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:resource></con:resource></con:interface><con:testSuite name="Regression Test Suite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="01 SOAP Timestamps" searchProperties="true" id="aed39093-604a-494a-bb0e-75ed51d729ab" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="request" name="TS Sha256 AddOcsp (deprecated) [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS Sha256 AddOcsp (deprecated) [syn]" sslKeystore=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
xmlns:ais="http://service.ais.swisscom.com/" 
xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" 
xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
               <sc:AddOcspResponse Type="urn:ietf:rfc:2560"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <SignatureObject>
    <Timestamp>
      <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
    </Timestamp>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS Sha256 AddRevocationBoth [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS Sha256 AddRevocationBoth [syn]" sslKeystore=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
xmlns:ais="http://service.ais.swisscom.com/" 
xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" 
xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <OptionalOutputs>
    <sc:RevocationInformation>
      <sc:CRLs>
        <sc:CRL>*</sc:CRL>
      </sc:CRLs>
      <sc:OCSPs>
        <sc:OCSP>*</sc:OCSP>
      </sc:OCSPs>
    </sc:RevocationInformation>
  </OptionalOutputs>
  <SignatureObject>
    <Timestamp>
      <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
    </Timestamp>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS Sha256 AddRevocationCADES [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS Sha256 AddRevocationCADES [syn]" sslKeystore=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
xmlns:ais="http://service.ais.swisscom.com/" 
xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" 
xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
               <sc:AddRevocationInformation Type="CADES"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <SignatureObject>
    <Timestamp>
      <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
    </Timestamp>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS Sha256 AddRevocationCaDeS [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS Sha256 AddRevocationCaDeS [syn]" sslKeystore=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
xmlns:ais="http://service.ais.swisscom.com/" 
xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" 
xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
               <sc:AddRevocationInformation Type="CaDeS"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <SignatureObject>
    <Timestamp>
      <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
    </Timestamp>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS Sha256 AddRevocationPADES [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS Sha256 AddRevocationPADES [syn]" sslKeystore=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
xmlns:ais="http://service.ais.swisscom.com/" 
xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" 
xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
               <sc:AddRevocationInformation Type="PADES"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <OptionalOutputs>
    <sc:RevocationInformation>
      <sc:CRLs>
        <sc:CRL>*</sc:CRL>
      </sc:CRLs>
      <sc:OCSPs>
        <sc:OCSP>*</sc:OCSP>
      </sc:OCSPs>
    </sc:RevocationInformation>
  </OptionalOutputs>
  <SignatureObject>
    <Timestamp>
      <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
    </Timestamp>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS Sha256 AddRevocationPaDeS [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS Sha256 AddRevocationPaDeS [syn]" sslKeystore=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
xmlns:ais="http://service.ais.swisscom.com/" 
xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" 
xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
               <sc:AddRevocationInformation Type="PaDeS"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <OptionalOutputs>
    <sc:RevocationInformation>
      <sc:CRLs>
        <sc:CRL>*</sc:CRL>
      </sc:CRLs>
      <sc:OCSPs>
        <sc:OCSP>*</sc:OCSP>
      </sc:OCSPs>
    </sc:RevocationInformation>
  </OptionalOutputs>
  <SignatureObject>
    <Timestamp>
      <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
    </Timestamp>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS Sha256 NoRI [syn]" id="2d2432a0-b6d2-4d47-bd7a-19695cbb7942"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS Sha256 NoRI [syn]" sslKeystore=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
xmlns:ais="http://service.ais.swisscom.com/" 
xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" 
xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <SignatureObject>
    <Timestamp>
      <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
    </Timestamp>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Check RequestID 1" id="e32f1173-6909-45ac-9a86-0b60223a3a05"><con:settings/><con:config><script>// http://www.soapui.org/Scripting-Properties/tips-a-tricks.html

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

// Get RequestID from Request
def holder = groovyUtils.getXmlHolder( "TS Sha256 NoRI [syn]#RawRequest" )
holder.namespaces['soap']='http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['xmlns']='urn:oasis:names:tc:dss:1.0:core:schema'
holder.namespaces['ais']='http://service.ais.swisscom.com/'
holder.namespaces['dsig']='http://www.w3.org/2000/09/xmldsig#'
def req = holder.getNodeValue( "//soap:Envelope/soap:Body/ais:sign/xmlns:SignRequest/@RequestID" )

// Get RequestID from Response
holder = groovyUtils.getXmlHolder( "TS Sha256 NoRI [syn]#Response" )
holder.namespaces['soap']='http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['xmlns']='urn:oasis:names:tc:dss:1.0:core:schema'
holder.namespaces['dsig']='http://www.w3.org/2000/09/xmldsig#'
holder.namespaces['async']='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0'
holder.namespaces['ais']='http://service.ais.swisscom.com/'
holder.namespaces['sc']='http://ais.swisscom.ch/1.0/schema'
def resp = holder.getNodeValue( "//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/@RequestID" )

// Ensure that values have been found
if (req == null || resp == null)
	testRunner.fail("RequestID is null")

// Compare both RequestID
else if( req != resp )
	testRunner.fail("RequestID of Request: '" + req + "' is not equal to RequestID of Response: '" + resp + "'")</script></con:config></con:testStep><con:testStep type="request" name="TS Batch [syn]" id="040871ee-74d3-4841-95a1-9de6166b9afa"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS Batch [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ais="http://service.ais.swisscom.com/">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/batchprocessing</AdditionalProfile>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash ID="256">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="384">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA384}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_384}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <OptionalOutputs>
    <sc:RevocationInformation>
      <sc:CRLs>
        <sc:CRL>*</sc:CRL>
      </sc:CRLs>
      <sc:OCSPs>
        <sc:OCSP>*</sc:OCSP>
      </sc:OCSPs>
    </sc:RevocationInformation>
  </OptionalOutputs>
  <SignatureObject>
    <Other>
      <sc:SignatureObjects>
        <sc:ExtendedSignatureObject WhichDocument="256">
          <Timestamp>
            <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
          </Timestamp>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="384">
          <Timestamp>
            <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
          </Timestamp>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512">
          <Timestamp>
            <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
          </Timestamp>
        </sc:ExtendedSignatureObject>
      </sc:SignatureObjects>
    </Other>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Check RequestID 2" id="cc62a877-5ab1-4c1d-a964-c11c5d3d9dbc"><con:settings/><con:config><script>// http://www.soapui.org/Scripting-Properties/tips-a-tricks.html

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

// Get RequestID from Request
def holder = groovyUtils.getXmlHolder( "TS Batch [syn]#RawRequest" )
holder.namespaces['soap']='http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['xmlns']='urn:oasis:names:tc:dss:1.0:core:schema'
holder.namespaces['ais']='http://service.ais.swisscom.com/'
holder.namespaces['dsig']='http://www.w3.org/2000/09/xmldsig#'
def req = holder.getNodeValue( "//soap:Envelope/soap:Body/ais:sign/xmlns:SignRequest/@RequestID" )

// Get RequestID from Response
holder = groovyUtils.getXmlHolder( "TS Batch [syn]#Response" )
holder.namespaces['soap']='http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['xmlns']='urn:oasis:names:tc:dss:1.0:core:schema'
holder.namespaces['dsig']='http://www.w3.org/2000/09/xmldsig#'
holder.namespaces['async']='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0'
holder.namespaces['ais']='http://service.ais.swisscom.com/'
holder.namespaces['sc']='http://ais.swisscom.ch/1.0/schema'
def resp = holder.getNodeValue( "//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/@RequestID" )

// Ensure that values have been found
if (req == null || resp == null)
	testRunner.fail("RequestID is null")

// Compare both RequestID
else if( req != resp )
	testRunner.fail("RequestID of Request: '" + req + "' is not equal to RequestID of Response: '" + resp + "'")</script></con:config></con:testStep><con:testStep type="request" name="TS Batch [asyn]" id="4d543e71-6d51-449e-94e2-254e99608247"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS Batch [asyn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/batchprocessing</AdditionalProfile>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing</AdditionalProfile>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash ID="256">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="384">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA384}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_384}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_1">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_2">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_3">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_4">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_5">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_6">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_7">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_8">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:resultmajor:Pending</ResultMajor>
  </Result>
  <OptionalOutputs>
    <async:ResponseID>*</async:ResponseID>
  </OptionalOutputs>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Check RequestID 3" id="7db658c6-fe4f-471d-98f4-122de6d48cf0"><con:settings/><con:config><script>// http://www.soapui.org/Scripting-Properties/tips-a-tricks.html

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

// Get RequestID from Request
def holder = groovyUtils.getXmlHolder( "TS Batch [asyn]#RawRequest" )
holder.namespaces['soap']='http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['xmlns']='urn:oasis:names:tc:dss:1.0:core:schema'
holder.namespaces['ais']='http://service.ais.swisscom.com/'
holder.namespaces['dsig']='http://www.w3.org/2000/09/xmldsig#'
def req = holder.getNodeValue( "//soap:Envelope/soap:Body/ais:sign/xmlns:SignRequest/@RequestID" )

// Get RequestID from Response
holder = groovyUtils.getXmlHolder( "TS Batch [asyn]#Response" )
holder.namespaces['soap']='http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['xmlns']='urn:oasis:names:tc:dss:1.0:core:schema'
holder.namespaces['dsig']='http://www.w3.org/2000/09/xmldsig#'
holder.namespaces['async']='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0'
holder.namespaces['ais']='http://service.ais.swisscom.com/'
holder.namespaces['sc']='http://ais.swisscom.ch/1.0/schema'
def resp = holder.getNodeValue( "//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/@RequestID" )

// Ensure that values have been found
if (req == null || resp == null)
	testRunner.fail("RequestID is null")

// Compare both RequestID
else if( req != resp )
	testRunner.fail("RequestID of Request: '" + req + "' is not equal to RequestID of Response: '" + resp + "'")</script></con:config></con:testStep><con:testStep type="transfer" name="Transfer ResponseID 1" id="07491194-15f9-482b-8343-f6f414ccde6b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>Poll Pending</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>TS Batch [asyn]</con:sourceStep><con:sourcePath>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:OptionalOutputs/async:ResponseID</con:sourcePath><con:targetType>Request</con:targetType><con:targetStep>Poll RequestID (Pending)</con:targetStep><con:targetPath>declare namespace soap="http://schemas.xmlsoap.org/soap/envelope/" 
declare namespace async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" 
declare namespace xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
declare namespace ais="http://service.ais.swisscom.com/"
//soap:Envelope/soap:Body/ais:pending/async:PendingRequest/xmlns:OptionalInputs/async:ResponseID</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" useXQuery="false" transferChildNodes="false"><con:name>Poll Final</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>TS Batch [asyn]</con:sourceStep><con:sourcePath>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:OptionalOutputs/async:ResponseID</con:sourcePath><con:targetType>Request</con:targetType><con:targetStep>Poll RequestID (Final)</con:targetStep><con:targetPath>declare namespace soap="http://schemas.xmlsoap.org/soap/envelope/" 
declare namespace async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" 
declare namespace xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
declare namespace ais="http://service.ais.swisscom.com/"
//soap:Envelope/soap:Body/ais:pending/async:PendingRequest/xmlns:OptionalInputs/async:ResponseID</con:targetPath></con:transfers></con:config></con:testStep><con:testStep type="delay" name="Poll Delay 1" id="47e1e1a7-84bb-4f7e-a916-67cb0cf1084e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="request" name="Poll RequestID (Pending)" id="04d1b646-bdcf-48c6-8fa8-cd3d6b4dc0da"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Poll RequestID (Pending)"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/">
   <soap:Body>
      <ais:pending>
         <async:PendingRequest Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <async:ResponseID>81986212-5574-4fbe-be98-8c463cb966f8</async:ResponseID>
            </OptionalInputs>
         </async:PendingRequest>
      </ais:pending>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Check RequestID 4" id="d6167f8f-0e81-4360-810c-de9be235ba17"><con:settings/><con:config><script>// http://www.soapui.org/Scripting-Properties/tips-a-tricks.html

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

// Get RequestID from Request (initial Batch Request)
def holder = groovyUtils.getXmlHolder( "TS Batch [asyn]#RawRequest" )
holder.namespaces['soap']='http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['xmlns']='urn:oasis:names:tc:dss:1.0:core:schema'
holder.namespaces['ais']='http://service.ais.swisscom.com/'
holder.namespaces['dsig']='http://www.w3.org/2000/09/xmldsig#'
def req = holder.getNodeValue( "//soap:Envelope/soap:Body/ais:sign/xmlns:SignRequest/@RequestID" )

// Get RequestID from Response (Poll Response)
holder = groovyUtils.getXmlHolder( "Poll RequestID (Pending)#Response" )
holder.namespaces['soap']='http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['xmlns']='urn:oasis:names:tc:dss:1.0:core:schema'
holder.namespaces['dsig']='http://www.w3.org/2000/09/xmldsig#'
holder.namespaces['async']='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0'
holder.namespaces['ais']='http://service.ais.swisscom.com/'
holder.namespaces['sc']='http://ais.swisscom.ch/1.0/schema'
def resp = holder.getNodeValue( "//soap:Envelope/soap:Body/ais:pendingResponse/xmlns:Response/@RequestID" )

// Ensure that values have been found
if (req == null || resp == null)
	testRunner.fail("RequestID is null")

// Compare both RequestID
else if( req != resp )
	testRunner.fail("RequestID of Request: '" + req + "' is not equal to RequestID of Response: '" + resp + "'")</script></con:config></con:testStep><con:testStep type="goto" name="Check-If-Pending 1" id="b7d3ba89-c4c6-4b71-ae5a-d2d28778f522"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Check-If-Ready</con:name><con:type>XPATH</con:type><con:expression>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

matches(//xmlns:ResultMajor/text(),'Pending')</con:expression><con:targetStep>Poll Delay 1</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="request" name="Poll RequestID (Final)" id="cdbb192e-7c38-4a81-adbc-a56d6cda51f9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Poll RequestID (Final)"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ais="http://service.ais.swisscom.com/">
   <soap:Body>
      <ais:pending>
         <async:PendingRequest Profile="http://ais.swisscom.ch/1.0" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns="urn:oasis:names:tc:dss:1.0:core:schema">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <async:ResponseID>81986212-5574-4fbe-be98-8c463cb966f8</async:ResponseID>
            </OptionalInputs>
         </async:PendingRequest>
      </ais:pending>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:pendingResponse</path><content><![CDATA[<ais:pendingResponse xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Response xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Result>
      <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
    </Result>
  <OptionalOutputs>
    <sc:RevocationInformation>
      <sc:CRLs>
        <sc:CRL>*</sc:CRL>
      </sc:CRLs>
      <sc:OCSPs>
        <sc:OCSP>*</sc:OCSP>
      </sc:OCSPs>
    </sc:RevocationInformation>
  </OptionalOutputs>
    <SignatureObject>
      <Other>
        <sc:SignatureObjects>
          <sc:ExtendedSignatureObject WhichDocument="256">
            <Timestamp>
              <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
            </Timestamp>
          </sc:ExtendedSignatureObject>
          <sc:ExtendedSignatureObject WhichDocument="384">
            <Timestamp>
              <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
            </Timestamp>
          </sc:ExtendedSignatureObject>
          <sc:ExtendedSignatureObject WhichDocument="512_1">
            <Timestamp>
              <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
            </Timestamp>
          </sc:ExtendedSignatureObject>
          <sc:ExtendedSignatureObject WhichDocument="512_2">
            <Timestamp>
              <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
            </Timestamp>
          </sc:ExtendedSignatureObject>
          <sc:ExtendedSignatureObject WhichDocument="512_3">
            <Timestamp>
              <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
            </Timestamp>
          </sc:ExtendedSignatureObject>
          <sc:ExtendedSignatureObject WhichDocument="512_4">
            <Timestamp>
              <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
            </Timestamp>
          </sc:ExtendedSignatureObject>
          <sc:ExtendedSignatureObject WhichDocument="512_5">
            <Timestamp>
              <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
            </Timestamp>
          </sc:ExtendedSignatureObject>
          <sc:ExtendedSignatureObject WhichDocument="512_6">
            <Timestamp>
              <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
            </Timestamp>
          </sc:ExtendedSignatureObject>
          <sc:ExtendedSignatureObject WhichDocument="512_7">
            <Timestamp>
              <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
            </Timestamp>
          </sc:ExtendedSignatureObject>
          <sc:ExtendedSignatureObject WhichDocument="512_8">
            <Timestamp>
              <RFC3161TimeStampToken>*</RFC3161TimeStampToken>
            </Timestamp>
          </sc:ExtendedSignatureObject>
        </sc:SignatureObjects>
      </Other>
    </SignatureObject>
  </Response>
</ais:pendingResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="02 Timestamps [Error]" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b86fb256-cd64-4676-b408-7d04a84c5703"><con:settings/><con:testStep type="request" name="TS WrongRevocationType [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS WrongRevocationType [syn]" sslKeystore=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
xmlns:ais="http://service.ais.swisscom.com/" 
xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" 
xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
               <sc:AddRevocationInformation Type="xxx"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
    <ResultMessage xml:lang="en">Unknown AddRevocationInformation type 'xxx'</ResultMessage>
  </Result>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS WrongCust [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS WrongCust [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>xxxxxx</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/AuthenticationFailed</ResultMinor>
  <ResultMessage xml:lang="en">Either ClaimedIdentity or SSL certificate check failed</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS WrongAlgo [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS WrongAlgo [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="xxxxxx"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnsupportedDigestAlgorithm</ResultMinor>
  <ResultMessage xml:lang="en">Unknown DigestMethod Algorithm 'xxxxxx'</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS WrongDigest [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS WrongDigest [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>xxxxxx</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">Wrong Digest length</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS WrongProfile [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS WrongProfile [syn]" sslKeystore=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" 
                      Profile="http://ais.swisscom.ch/0.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnsupportedProfile</ResultMinor>
  <ResultMessage xml:lang="en">Unknown Profile 'http://ais.swisscom.ch/0.0'</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS MissingAddProfile [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS MissingAddProfile [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <!--<AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>-->
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">Element &lt;AdditionalProfiles> is missing. It is mandatory for Timestamp SignRequest to define the Profile.</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS WrongAddProfile 1 [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS WrongAddProfile 1 [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:xxxxxx</AdditionalProfile>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">Unknown AdditionalProfile 'urn:oasis:names:tc:dss:1.0:profiles:xxxxxx'</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS WrongAddProfile 2 [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS WrongAddProfile 2 [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:xxxxxx</AdditionalProfile>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">Unknown AdditionalProfile 'urn:oasis:names:tc:dss:1.0:profiles:xxxxxx'</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS WrongSigType [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS WrongSigType [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:0000</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">Unknown SignatureType 'urn:ietf:rfc:0000'</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS BatchButMissingProfile [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS BatchButMissingProfile [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash ID="1">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="2">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">More than one DocumentHash requires presence of Batchprocessing Profile</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS BatchButMissingDocId [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS BatchButMissingDocId [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/batchprocessing</AdditionalProfile>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">DocumentHash IDs must be unique</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS BatchButSameDocId [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS BatchButSameDocId [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/batchprocessing</AdditionalProfile>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash ID="xxx">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="xxx">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">DocumentHash IDs must be unique</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS MultipleSigType [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS MultipleSigType [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#STATIC_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>          
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">Element &lt;SignatureType> found multiple times</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS MultipleName [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS MultipleName [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#STATIC_ID}</Name>
               </ClaimedIdentity>
               <ClaimedIdentity>
                  <Name>xxx</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>          
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">Element &lt;ClaimedIdentity> found multiple times</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS MultipleClaimedIdentity [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS MultipleClaimedIdentity [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#STATIC_ID}</Name>
                  <Name>xxx</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>          
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/AuthenticationFailed</ResultMinor>
  <ResultMessage xml:lang="en">Either ClaimedIdentity or SSL certificate check failed</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="TS MultipleAddTimestamp [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="TS MultipleAddTimestamp [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3161</SignatureType>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:timestamping</AdditionalProfile>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">Element &lt;AddTimestamp> found multiple times</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="03 RESTful Timestamps" searchProperties="true" id="c1054c17-4bc7-42dd-9b43-b3bb7b27d0e2" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="transfer" name="Transfer ResponseID 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>Poll Pending</con:name><con:sourceType xsi:nil="true"/><con:sourceStep xsi:nil="true"/><con:sourcePath>declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
//xmlns:SignResponse/xmlns:OptionalOutputs/async:ResponseID</con:sourcePath><con:targetType xsi:nil="true"/><con:targetStep xsi:nil="true"/><con:targetPath>declare namespace dsig="http://www.w3.org/2000/09/xmldsig#" 
declare namespace xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
declare namespace ais="http://ais.swisscom.ch/1.0/schema" 
declare namespace async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0"
//async:PendingRequest/xmlns:OptionalInputs/async:ResponseID</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>Poll Final</con:name><con:sourceType xsi:nil="true"/><con:sourceStep xsi:nil="true"/><con:sourcePath>declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
//xmlns:SignResponse/xmlns:OptionalOutputs/async:ResponseID</con:sourcePath><con:targetType xsi:nil="true"/><con:targetStep xsi:nil="true"/><con:targetPath>declare namespace dsig="http://www.w3.org/2000/09/xmldsig#" 
declare namespace xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
declare namespace ais="http://ais.swisscom.ch/1.0/schema" 
declare namespace async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0"
//async:PendingRequest/xmlns:OptionalInputs/async:ResponseID</con:targetPath></con:transfers></con:config></con:testStep><con:testStep type="delay" name="Poll Delay 1"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="goto" name="Check-If-Pending 1"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Check-If-Ready</con:name><con:type>XPATH</con:type><con:expression>declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
matches(//xmlns:ResultMajor/text(),'Pending')</con:expression><con:targetStep>Poll Delay 1</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="transfer" name="Get ResponseID 2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>ID</con:name><con:sourceType xsi:nil="true"/><con:sourceStep xsi:nil="true"/><con:sourcePath>declare namespace xmlns='${#TestSuite#BASEURL}/AIS-Server/rs/v1.0/sign';
//xmlns:Response/xmlns:SignResponse/xmlns:OptionalOutputs/xmlns:async.ResponseID</con:sourcePath><con:targetType>_tmp</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="delay" name="Poll Delay 2"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="goto" name="Check-If-Pending 2"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Check-If-Ready</con:name><con:type>XPATH</con:type><con:expression>declare namespace xmlns='${#TestSuite#BASEURL}/AIS-Server/rs/v1.0/pending';
matches(//xmlns:ResultMajor/text(),'Pending')</con:expression><con:targetStep>Poll Delay 2</con:targetStep></con:condition></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="04 SOAP Static" searchProperties="true" id="a6c6b5b7-ddeb-49d0-83cc-402213f514cb" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="request" name="Static AddRevocationBOTH NoTSA [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Static AddRevocationBOTH NoTSA [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#STATIC_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <SignatureObject>
    <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Static AddRevocationBOTH [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Static AddRevocationBOTH [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#STATIC_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <OptionalOutputs>
    <sc:RevocationInformation>
      <sc:CRLs>
        <sc:CRL>*</sc:CRL>
      </sc:CRLs>
      <sc:OCSPs>
        <sc:OCSP>*</sc:OCSP>
      </sc:OCSPs>
    </sc:RevocationInformation>
  </OptionalOutputs>
  <SignatureObject>
    <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Static AddRevocationCADES [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Static AddRevocationCADES [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#STATIC_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="CADES"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <SignatureObject>
    <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Static AddRevocationPADES [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Static AddRevocationPADES [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#STATIC_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="PADES"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <OptionalOutputs>
    <sc:RevocationInformation>
      <sc:CRLs>
        <sc:CRL>*</sc:CRL>
      </sc:CRLs>
      <sc:OCSPs>
        <sc:OCSP>*</sc:OCSP>
      </sc:OCSPs>
    </sc:RevocationInformation>
  </OptionalOutputs>
  <SignatureObject>
    <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Static NoRI [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Static NoRI [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#STATIC_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <SignatureObject>
    <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Static Batch [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Static Batch [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#STATIC_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/batchprocessing</AdditionalProfile>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash ID="256">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="384">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA384}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_384}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_1">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_2">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_3">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_4">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_5">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_6">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_7">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_8">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <OptionalOutputs>
    <sc:RevocationInformation>
      <sc:CRLs>
        <sc:CRL>*</sc:CRL>
      </sc:CRLs>
      <sc:OCSPs>
        <sc:OCSP>*</sc:OCSP>
      </sc:OCSPs>
    </sc:RevocationInformation>
  </OptionalOutputs>
  <SignatureObject>
    <Other>
      <sc:SignatureObjects>
        <sc:ExtendedSignatureObject WhichDocument="256">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="384">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_1">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_2">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_3">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_4">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_5">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_6">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_7">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_8">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
      </sc:SignatureObjects>
    </Other>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Static Batch [asyn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Static Batch [asyn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#STATIC_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/batchprocessing</AdditionalProfile>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing</AdditionalProfile>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash ID="256">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="384">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA384}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_384}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_1">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_2">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_3">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_4">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_5">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_6">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_7">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_8">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:resultmajor:Pending</ResultMajor>
  </Result>
  <OptionalOutputs>
    <async:ResponseID>*</async:ResponseID>
  </OptionalOutputs>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Transfer ResponseID 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>Poll Pending</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Static Batch [asyn]</con:sourceStep><con:sourcePath>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:OptionalOutputs/async:ResponseID</con:sourcePath><con:targetType>Request</con:targetType><con:targetStep>Poll RequestID (Pending)</con:targetStep><con:targetPath>declare namespace soap="http://schemas.xmlsoap.org/soap/envelope/" 
declare namespace async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" 
declare namespace xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
declare namespace ais="http://service.ais.swisscom.com/"
//soap:Envelope/soap:Body/ais:pending/async:PendingRequest/xmlns:OptionalInputs/async:ResponseID</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>Poll Final</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Static Batch [asyn]</con:sourceStep><con:sourcePath>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:OptionalOutputs/async:ResponseID</con:sourcePath><con:targetType>Request</con:targetType><con:targetStep>Poll RequestID (Final)</con:targetStep><con:targetPath>declare namespace soap="http://schemas.xmlsoap.org/soap/envelope/" 
declare namespace async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" 
declare namespace xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
declare namespace ais="http://service.ais.swisscom.com/"
//soap:Envelope/soap:Body/ais:pending/async:PendingRequest/xmlns:OptionalInputs/async:ResponseID</con:targetPath></con:transfers></con:config></con:testStep><con:testStep type="delay" name="Poll Delay 1"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="request" name="Poll RequestID (Pending)"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Poll RequestID (Pending)"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/">
   <soap:Body>
      <ais:pending>
         <async:PendingRequest Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <async:ResponseID>536ec5d3-5387-4f84-bdf5-71343b68e403</async:ResponseID>
            </OptionalInputs>
         </async:PendingRequest>
      </ais:pending>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Check-If-Pending 1"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Check-If-Ready</con:name><con:type>XPATH</con:type><con:expression>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

matches(//xmlns:ResultMajor/text(),'Pending')</con:expression><con:targetStep>Poll Delay 1</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="request" name="Poll RequestID (Final)"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Poll RequestID (Final)"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/">
   <soap:Body>
      <ais:pending>
         <async:PendingRequest Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <async:ResponseID>536ec5d3-5387-4f84-bdf5-71343b68e403</async:ResponseID>
            </OptionalInputs>
         </async:PendingRequest>
      </ais:pending>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:pendingResponse</path><content><![CDATA[<ais:pendingResponse xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Response xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Result>
      <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
    </Result>
  <OptionalOutputs>
    <sc:RevocationInformation>
      <sc:CRLs>
        <sc:CRL>*</sc:CRL>
      </sc:CRLs>
      <sc:OCSPs>
        <sc:OCSP>*</sc:OCSP>
      </sc:OCSPs>
    </sc:RevocationInformation>
  </OptionalOutputs>
    <SignatureObject>
      <Other>
      <sc:SignatureObjects>
        <sc:ExtendedSignatureObject WhichDocument="256">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="384">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_1">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_2">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_3">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_4">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_5">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_6">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_7">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_8">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
      </sc:SignatureObjects>
      </Other>
    </SignatureObject>
  </Response>
</ais:pendingResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="05 SOAP Static [Error]" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="67be2b3b-3d19-4545-bdbc-a40f0bb0c7d0"><con:settings/><con:testStep type="request" name="Static WrongCust [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Static WrongCust [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>xxxxxx:${#TestSuite#STATIC_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/AuthenticationFailed</ResultMinor>
  <ResultMessage xml:lang="en">Either ClaimedIdentity or SSL certificate check failed</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Static WrongKeyId [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Static WrongKeyId [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:xxxxxx</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnknownServiceEntity</ResultMinor>
  <ResultMessage xml:lang="en">Unknown Key ID in Element &lt;Name></ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Static WrongAlgo [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Static WrongAlgo [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#STATIC_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="xxxxxx"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnsupportedDigestAlgorithm</ResultMinor>
  <ResultMessage xml:lang="en">Unknown DigestMethod Algorithm 'xxxxxx'</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Static WrongDigest [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Static WrongDigest [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#STATIC_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>xxxxxx</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">Wrong Digest length</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Static WrongBatch [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Static WrongBatch [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#STATIC_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash ID="256">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="384">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA384}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_384}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">More than one DocumentHash requires presence of Batchprocessing Profile</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Static BatchButSameDocId [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Static BatchButSameDocId [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#STATIC_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/batchprocessing</AdditionalProfile>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA384}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_384}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">DocumentHash IDs must be unique</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Static MultipleAddOcsp [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Static MultipleAddOcsp [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#STATIC_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddOcspResponse Type="urn:ietf:rfc:2560"/>
               <sc:AddOcspResponse Type="urn:ietf:rfc:2560"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">Element &lt;AddOcspResponse> found multiple times</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Static MultipleRevocationInfo [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Static MultipleRevocationInfo [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#STATIC_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">Element &lt;AddRevocationInformation> found multiple times</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Static MultipleAddTimestamp [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Static MultipleAddTimestamp [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#STATIC_ID}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">Element &lt;AddTimestamp> found multiple times</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Poll WrongRequestID"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Poll WrongRequestID"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/">
   <soap:Body>
      <ais:pending>
         <async:PendingRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <async:ResponseID>xxxxxx</async:ResponseID>
            </OptionalInputs>
         </async:PendingRequest>
      </ais:pending>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:pendingResponse/xmlns:Response/xmlns:Result</path><content><![CDATA[<Result xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">Unknown ResponseID 'xxxxxx'</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="06 RESTful Static" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0a46f06e-56e6-4570-bd09-9e6d57639b65"><con:settings/><con:testStep type="groovy" name="Validate JSON Response 1"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper

def response = context.expand( '${JSON Static [syn]#Response}' ).toString()
def slurper = new JsonSlurper()
def json = slurper.parseText response

if ( json."SignResponse"."Result"."ResultMajor" != "urn:oasis:names:tc:dss:1.0:resultmajor:Success" ) {
	testRunner.fail("ResultMajor was not successful")
	return
}

if ( json."SignResponse"."SignatureObject"."Base64Signature"."@Type" != "urn:ietf:rfc:3369" ) {
	testRunner.fail("Signature type invalid")
	return
}
	
if ( ! ( json."SignResponse"."SignatureObject"."Base64Signature"."\$" ==~ /MI.*/ ) ) {
	testRunner.fail("Signature content invalid") 
	return
}
</script></con:config></con:testStep><con:testStep type="transfer" name="Transfer ResponseID 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>Poll Pending</con:name><con:sourceType xsi:nil="true"/><con:sourceStep xsi:nil="true"/><con:sourcePath>declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
//xmlns:SignResponse/xmlns:OptionalOutputs/async:ResponseID</con:sourcePath><con:targetType xsi:nil="true"/><con:targetStep xsi:nil="true"/><con:targetPath>declare namespace dsig="http://www.w3.org/2000/09/xmldsig#" 
declare namespace xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
declare namespace ais="http://ais.swisscom.ch/1.0/schema" 
declare namespace async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0"
//async:PendingRequest/xmlns:OptionalInputs/async:ResponseID</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>Poll Final</con:name><con:sourceType xsi:nil="true"/><con:sourceStep xsi:nil="true"/><con:sourcePath>declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
//xmlns:SignResponse/xmlns:OptionalOutputs/async:ResponseID</con:sourcePath><con:targetType xsi:nil="true"/><con:targetStep xsi:nil="true"/><con:targetPath>declare namespace dsig="http://www.w3.org/2000/09/xmldsig#" 
declare namespace xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
declare namespace ais="http://ais.swisscom.ch/1.0/schema" 
declare namespace async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0"
//async:PendingRequest/xmlns:OptionalInputs/async:ResponseID</con:targetPath></con:transfers></con:config></con:testStep><con:testStep type="delay" name="Poll Delay 1"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="goto" name="Check-If-Pending 1"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Check-If-Ready</con:name><con:type>XPATH</con:type><con:expression>declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
matches(//xmlns:ResultMajor/text(),'Pending')</con:expression><con:targetStep>Poll Delay 1</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="transfer" name="Get ResponseID 2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>ID</con:name><con:sourceType xsi:nil="true"/><con:sourceStep xsi:nil="true"/><con:sourcePath>declare namespace xmlns='${#TestSuite#BASEURL}/AIS-Server/rs/v1.0/sign';
//xmlns:Response/xmlns:SignResponse/xmlns:OptionalOutputs/xmlns:async.ResponseID</con:sourcePath><con:targetType>_tmp</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="delay" name="Poll Delay 2"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="goto" name="Check-If-Pending 2"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Check-If-Ready</con:name><con:type>XPATH</con:type><con:expression>declare namespace xmlns='${#TestSuite#BASEURL}/AIS-Server/rs/v1.0/pending';
matches(//xmlns:ResultMajor/text(),'Pending')</con:expression><con:targetStep>Poll Delay 2</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Validate JSON Response 2"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper

def response = context.expand( '${JSON Poll RequestID (Pending)#Response}' ).toString()
def slurper = new JsonSlurper()
def json = slurper.parseText response

if ( json."SignResponse"."Result"."ResultMajor" != "urn:oasis:names:tc:dss:1.0:resultmajor:Success" ) {
	testRunner.fail("ResultMajor was not successful")
	return
}

if ( json."SignResponse"."SignatureObject"."Other"."sc.SignatureObjects"."sc.ExtendedSignatureObject"."Base64Signature"."@Type"[9] != "urn:ietf:rfc:3369" ) {
	testRunner.fail("Signature type invalid")
	return
}
	
if ( ! ( json."SignResponse"."SignatureObject"."Other"."sc.SignatureObjects"."sc.ExtendedSignatureObject"."Base64Signature"."\$"[9] ==~ /MI.*/ ) ) {
	testRunner.fail("Signature content invalid") 
	return
}
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="07 SOAP OnDemand" searchProperties="true" id="49af4756-b8a6-4266-8352-081638c22cdb" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="request" name="OnDemand ADV [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <OptionalOutputs>
    <sc:RevocationInformation>
      <sc:CRLs>
        <sc:CRL>*</sc:CRL>
      </sc:CRLs>
      <sc:OCSPs>
        <sc:OCSP>*</sc:OCSP>
      </sc:OCSPs>
    </sc:RevocationInformation>
  </OptionalOutputs>
  <SignatureObject>
    <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV Batch [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV Batch [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/batchprocessing</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash ID="256">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="384">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA384}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_384}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_1">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_2">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_3">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_4">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_5">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_6">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_7">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_8">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <OptionalOutputs>
    <sc:RevocationInformation>
      <sc:CRLs>
        <sc:CRL>*</sc:CRL>
      </sc:CRLs>
      <sc:OCSPs>
        <sc:OCSP>*</sc:OCSP>
      </sc:OCSPs>
    </sc:RevocationInformation>
  </OptionalOutputs>
  <SignatureObject>
    <Other>
      <sc:SignatureObjects>
        <sc:ExtendedSignatureObject WhichDocument="256">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="384">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_1">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_2">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_3">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_4">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_5">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_6">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_7">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_8">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
      </sc:SignatureObjects>
    </Other>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV Batch [asyn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV Batch [asyn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/batchprocessing</AdditionalProfile>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash ID="256">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="384">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA384}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_384}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_1">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_2">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_3">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_4">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_5">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_6">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_7">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_8">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:resultmajor:Pending</ResultMajor>
  </Result>
  <OptionalOutputs>
    <async:ResponseID>*</async:ResponseID>
  </OptionalOutputs>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Transfer ResponseID 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>Poll Pending</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>OnDemand ADV Batch [asyn]</con:sourceStep><con:sourcePath>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:OptionalOutputs/async:ResponseID</con:sourcePath><con:targetType>Request</con:targetType><con:targetStep>Poll RequestID (Pending)</con:targetStep><con:targetPath>declare namespace soap="http://schemas.xmlsoap.org/soap/envelope/" 
declare namespace async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" 
declare namespace xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
declare namespace ais="http://service.ais.swisscom.com/"
//soap:Envelope/soap:Body/ais:pending/async:PendingRequest/xmlns:OptionalInputs/async:ResponseID</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>Poll Final</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>OnDemand ADV Batch [asyn]</con:sourceStep><con:sourcePath>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:OptionalOutputs/async:ResponseID</con:sourcePath><con:targetType>Request</con:targetType><con:targetStep>Poll RequestID (Final)</con:targetStep><con:targetPath>declare namespace soap="http://schemas.xmlsoap.org/soap/envelope/" 
declare namespace async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" 
declare namespace xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
declare namespace ais="http://service.ais.swisscom.com/"
//soap:Envelope/soap:Body/ais:pending/async:PendingRequest/xmlns:OptionalInputs/async:ResponseID</con:targetPath></con:transfers></con:config></con:testStep><con:testStep type="delay" name="Poll Delay 1"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="request" name="Poll RequestID (Pending)"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Poll RequestID (Pending)"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/">
   <soap:Body>
      <ais:pending>
         <async:PendingRequest Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <async:ResponseID>200c14a6-961f-4649-8b95-66c321195df9</async:ResponseID>
            </OptionalInputs>
         </async:PendingRequest>
      </ais:pending>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Check-If-Pending 1"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Check-If-Ready</con:name><con:type>XPATH</con:type><con:expression>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
matches(//xmlns:ResultMajor/text(),'Pending')</con:expression><con:targetStep>Poll Delay 1</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="request" name="Poll RequestID (Final)"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Poll RequestID (Final)"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/">
   <soap:Body>
      <ais:pending>
         <async:PendingRequest Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <async:ResponseID>200c14a6-961f-4649-8b95-66c321195df9</async:ResponseID>
            </OptionalInputs>
         </async:PendingRequest>
      </ais:pending>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:pendingResponse</path><content><![CDATA[<ais:pendingResponse xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Response xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Result>
      <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
    </Result>
  <OptionalOutputs>
    <sc:RevocationInformation>
      <sc:CRLs>
        <sc:CRL>*</sc:CRL>
      </sc:CRLs>
      <sc:OCSPs>
        <sc:OCSP>*</sc:OCSP>
      </sc:OCSPs>
    </sc:RevocationInformation>
  </OptionalOutputs>
    <SignatureObject>
      <Other>
      <sc:SignatureObjects>
        <sc:ExtendedSignatureObject WhichDocument="256">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="384">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_1">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_2">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_3">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_4">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_5">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_6">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_7">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_8">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
      </sc:SignatureObjects>
      </Other>
    </SignatureObject>
  </Response>
</ais:pendingResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV DN-Special-Chars [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV DN-Special-Chars [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN} ôèùçæ, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <OptionalOutputs>
    <sc:RevocationInformation>
      <sc:CRLs>
        <sc:CRL>*</sc:CRL>
      </sc:CRLs>
      <sc:OCSPs>
        <sc:OCSP>*</sc:OCSP>
      </sc:OCSPs>
    </sc:RevocationInformation>
  </OptionalOutputs>
  <SignatureObject>
    <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="08 SOAP OnDemand [Error]" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8d47d59d-4173-4037-ab83-0bbc6ea6adb0"><con:settings/><con:testStep type="request" name="OnDemand QUA noMID [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand QUA noMID [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_QUALIFIED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result/xmlns:ResultMajor</path><content>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV WrongCust [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV WrongCust [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>xxxxxx:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/AuthenticationFailed</ResultMinor>
  <ResultMessage xml:lang="en">Either ClaimedIdentity or SSL certificate check failed</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV WrongStaticId [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV WrongStaticId [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:xxxxxx</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnknownServiceEntity</ResultMinor>
  <ResultMessage xml:lang="en">Unknown Service Name in element &lt;Name></ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV WrongDN 1 [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV WrongDN 1 [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>xxxxxx</sc:DistinguishedName>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">distinguished name could not be parsed</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV WrongDN 2 [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV WrongDN 2 [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=,o=,c=</sc:DistinguishedName>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">distinguished name RDN 'CN' must not be empty</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV OnlyCountryDN [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV OnlyCountryDN [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>c=CH</sc:DistinguishedName>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
    <ResultMessage xml:lang="en">distinguished name is missing required RDN 'commonName' or 'CN'</ResultMessage>
  </Result>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV WrongOCSP [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV WrongOCSP [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddOcspResponse Type="urn:ietf:rfc:xxxx"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">Unknown OCSPResponse type 'urn:ietf:rfc:xxxx'</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV WrongTimestamp [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV WrongTimestamp [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
               </sc:CertificateRequest>
               <AddTimestamp Type="xxx"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">Unknown timestamp type 'xxx'</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MultipleEmailAddress [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MultipleEmailAddress [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only, emailAddress=test1@test.ch, emailAddress=test2@test.ch</sc:DistinguishedName>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
    <ResultMessage xml:lang="en">distinguished name 'cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only, emailAddress=test1@test.ch, emailAddress=test2@test.ch' must not contain duplicate RDNs</ResultMessage>
  </Result>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MultipleGivenName [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MultipleGivenName [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only, givenName=test1, givenName=test2</sc:DistinguishedName>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
    <ResultMessage xml:lang="en">distinguished name 'cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only, givenName=test1, givenName=test2' must not contain duplicate RDNs</ResultMessage>
  </Result>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MultipleSN [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MultipleSN [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only, sn=test1, sn=test2</sc:DistinguishedName>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
    <ResultMessage xml:lang="en">distinguished name 'cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only, sn=test1, sn=test2' must not contain duplicate RDNs</ResultMessage>
  </Result>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MultipleL [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MultipleL [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only, l=loc1, l=loc2</sc:DistinguishedName>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
    <ResultMessage xml:lang="en">distinguished name 'cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only, l=loc1, l=loc2' must not contain duplicate RDNs</ResultMessage>
  </Result>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MultipleO [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MultipleO [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only, o=org1, o=org2</sc:DistinguishedName>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
    <ResultMessage xml:lang="en">distinguished name 'cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only, o=org1, o=org2' must not contain duplicate RDNs</ResultMessage>
  </Result>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MultipleSerialNumber [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MultipleSerialNumber [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only, serialNumber=111, serialNumber=222</sc:DistinguishedName>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
    <ResultMessage xml:lang="en">distinguished name 'cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only, serialNumber=111, serialNumber=222' must not contain duplicate RDNs</ResultMessage>
  </Result>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MultipleST [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MultipleST [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only, st=st1, st=st2</sc:DistinguishedName>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
    <ResultMessage xml:lang="en">distinguished name 'cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only, st=st1, st=st2' must not contain duplicate RDNs</ResultMessage>
  </Result>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="09 RESTful OnDemand" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="dca8662e-59fd-41c7-a37d-59a7844d605f"><con:settings/><con:testStep type="groovy" name="Validate JSON Response 1"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper

def response = context.expand( '${JSON OnDemand ADV [syn]#Response}' ).toString()
def slurper = new JsonSlurper()
def json = slurper.parseText response

if ( json."SignResponse"."Result"."ResultMajor" != "urn:oasis:names:tc:dss:1.0:resultmajor:Success" ) {
	testRunner.fail("ResultMajor was not successful")
	return
}

if ( json."SignResponse"."SignatureObject"."Base64Signature"."@Type" != "urn:ietf:rfc:3369" ) {
	testRunner.fail("Signature type invalid")
	return
}
	
if ( ! ( json."SignResponse"."SignatureObject"."Base64Signature"."\$" ==~ /MI.*/ ) ) {
	testRunner.fail("Signature content invalid") 
	return
}
</script></con:config></con:testStep><con:testStep type="transfer" name="Transfer ResponseID 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>Poll Pending</con:name><con:sourceType xsi:nil="true"/><con:sourceStep xsi:nil="true"/><con:sourcePath>declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
//xmlns:SignResponse/xmlns:OptionalOutputs/async:ResponseID</con:sourcePath><con:targetType xsi:nil="true"/><con:targetStep xsi:nil="true"/><con:targetPath>declare namespace dsig="http://www.w3.org/2000/09/xmldsig#" 
declare namespace xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
declare namespace ais="http://ais.swisscom.ch/1.0/schema" 
declare namespace async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0"
//async:PendingRequest/xmlns:OptionalInputs/async:ResponseID</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>Poll Final</con:name><con:sourceType xsi:nil="true"/><con:sourceStep xsi:nil="true"/><con:sourcePath>declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
//xmlns:SignResponse/xmlns:OptionalOutputs/async:ResponseID</con:sourcePath><con:targetType xsi:nil="true"/><con:targetStep xsi:nil="true"/><con:targetPath>declare namespace dsig="http://www.w3.org/2000/09/xmldsig#" 
declare namespace xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
declare namespace ais="http://ais.swisscom.ch/1.0/schema" 
declare namespace async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0"
//async:PendingRequest/xmlns:OptionalInputs/async:ResponseID</con:targetPath></con:transfers></con:config></con:testStep><con:testStep type="delay" name="Poll Delay 1"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="goto" name="Check-If-Pending 1"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Check-If-Ready</con:name><con:type>XPATH</con:type><con:expression>declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
matches(//xmlns:ResultMajor/text(),'Pending')</con:expression><con:targetStep>Poll Delay 1</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="transfer" name="Get ResponseID 2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>ID</con:name><con:sourceType xsi:nil="true"/><con:sourceStep xsi:nil="true"/><con:sourcePath>declare namespace xmlns='${#TestSuite#BASEURL}/AIS-Server/rs/v1.0/sign';
//xmlns:Response/xmlns:SignResponse/xmlns:OptionalOutputs/xmlns:async.ResponseID</con:sourcePath><con:targetType>_tmp</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="delay" name="Poll Delay 2"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="goto" name="Check-If-Pending 2"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Check-If-Ready</con:name><con:type>XPATH</con:type><con:expression>declare namespace xmlns='${#TestSuite#BASEURL}/AIS-Server/rs/v1.0/pending';
matches(//xmlns:ResultMajor/text(),'Pending')</con:expression><con:targetStep>Poll Delay 2</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Validate JSON Response 2"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper

def response = context.expand( '${JSON Poll RequestID (Pending)#Response}' ).toString()
def slurper = new JsonSlurper()
def json = slurper.parseText response

if ( json."SignResponse"."Result"."ResultMajor" != "urn:oasis:names:tc:dss:1.0:resultmajor:Success" ) {
	testRunner.fail("ResultMajor was not successful")
	return
}

if ( json."SignResponse"."SignatureObject"."Other"."sc.SignatureObjects"."sc.ExtendedSignatureObject"."Base64Signature"."@Type"[9] != "urn:ietf:rfc:3369" ) {
	testRunner.fail("Signature type invalid")
	return
}
	
if ( ! ( json."SignResponse"."SignatureObject"."Other"."sc.SignatureObjects"."sc.ExtendedSignatureObject"."Base64Signature"."\$"[9] ==~ /MI.*/ ) ) {
	testRunner.fail("Signature content invalid") 
	return
}
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="10 SOAP OnDemand MID" searchProperties="true" id="48772586-0c45-42fb-aa09-2b1b82f1525e" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="UserAlert Mobile ID 1"><con:settings/><con:config><script>def alert = com.eviware.soapui.support.UISupport;
if (testRunner.testCase.testSuite.getPropertyValue("USER_ALERT") == "true" ) {
	def myMSISDN = testRunner.testCase.testSuite.getPropertyValue("MSISDN");
	alert.showInfoMessage("Please first click OK and then proceed the Mobile ID Request on your Mobile $myMSISDN")
}

</script></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MID [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MID [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope 
   xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
   xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
   xmlns:ais="http://service.ais.swisscom.com/" 
   xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" 
   xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" 
                      Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
                  <sc:StepUpAuthorisation>
                     <sc:MobileID Type="http://ais.swisscom.ch/1.0/auth/mobileid/1.0">
                        <sc:MSISDN>${#TestSuite#MSISDN}</sc:MSISDN>
                        <sc:Message>10: OnDemand ADV MID [syn]</sc:Message>
                        <sc:Language>eN</sc:Language>
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Depth="ALL" Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <OptionalOutputs>
    <sc:MobileIDAPTransID>*</sc:MobileIDAPTransID>
    <sc:MobileIDSerialNumber>*</sc:MobileIDSerialNumber>
    <sc:RevocationInformation>
      <sc:CRLs>
        <sc:CRL>*</sc:CRL>
      </sc:CRLs>
      <sc:OCSPs>
        <sc:OCSP>*</sc:OCSP>
      </sc:OCSPs>
    </sc:RevocationInformation>
  </OptionalOutputs>
  <SignatureObject>
    <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Get MIDSerialNumber"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>MIDSerialNumber</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>OnDemand ADV MID [syn]</con:sourceStep><con:sourcePath>declare namespace sc='http://ais.swisscom.ch/1.0/schema';
//sc:MobileIDSerialNumber</con:sourcePath><con:targetType>_tmp_MIDSerialNumber</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="UserAlert Mobile ID 2"><con:settings/><con:config><script>def alert = com.eviware.soapui.support.UISupport;
if (testRunner.testCase.testSuite.getPropertyValue("USER_ALERT") == "true" ) {
	def myMSISDN = testRunner.testCase.testSuite.getPropertyValue("MSISDN");
	alert.showInfoMessage("Please first click OK and then proceed the Mobile ID Request on your Mobile $myMSISDN")
}</script></con:config></con:testStep><con:testStep type="request" name="OnDemand QUA MID [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand QUA MID [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_QUALIFIED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>commonName=${#TestSuite#OnDemand_CN}, organizationName=${#TestSuite#OnDemand_O}, countryName=${#TestSuite#OnDemand_C}, organizationalUnitName=Certificate and signatures for test purpose only</sc:DistinguishedName>
                  <sc:StepUpAuthorisation>
                     <sc:MobileID Type="http://ais.swisscom.ch/1.0/auth/mobileid/1.0">
                        <sc:MSISDN>${#TestSuite#MSISDN}</sc:MSISDN>
                        <sc:Message>10: OnDemand QUA MID [syn]</sc:Message>
                        <sc:Language>en</sc:Language>
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <OptionalOutputs>
    <sc:MobileIDAPTransID>*</sc:MobileIDAPTransID>
    <sc:MobileIDSerialNumber>${#TestSuite#_tmp_MIDSerialNumber}</sc:MobileIDSerialNumber>
    <sc:RevocationInformation>
      <sc:CRLs>
        <sc:CRL>*</sc:CRL>
      </sc:CRLs>
      <sc:OCSPs>
        <sc:OCSP>*</sc:OCSP>
      </sc:OCSPs>
    </sc:RevocationInformation>
  </OptionalOutputs>
  <SignatureObject>
    <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="UserAlert Mobile ID 3"><con:settings/><con:config><script>def alert = com.eviware.soapui.support.UISupport;
if (testRunner.testCase.testSuite.getPropertyValue("USER_ALERT") == "true" ) {
	def myMSISDN = testRunner.testCase.testSuite.getPropertyValue("MSISDN");
	alert.showInfoMessage("Please first click OK and then proceed the Mobile ID Request on your Mobile $myMSISDN")
}</script></con:config></con:testStep><con:testStep type="request" name="OnDemand MID ADV Batch [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand MID ADV Batch [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/batchprocessing</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only,emailAddress=test@test.com,givenName=Test1,surname=Test2,localityName=Hauptgebäude,serialNumber=123456,stateOrProvinceName=ZH</sc:DistinguishedName>
                  <sc:StepUpAuthorisation>
                     <sc:MobileID Type="http://ais.swisscom.ch/1.0/auth/mobileid/1.0">
                        <sc:MSISDN>${#TestSuite#MSISDN}</sc:MSISDN>
                        <sc:Message>10: OnDemand MID ADV Batch [syn]</sc:Message>
                        <sc:Language>En</sc:Language>
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash ID="256">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="384">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA384}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_384}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_1">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_2">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_3">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_4">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_5">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_6">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_7">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_8">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <OptionalOutputs>
    <sc:MobileIDAPTransID>*</sc:MobileIDAPTransID>
    <sc:MobileIDSerialNumber>${#TestSuite#_tmp_MIDSerialNumber}</sc:MobileIDSerialNumber>
    <sc:RevocationInformation>
      <sc:CRLs>
        <sc:CRL>*</sc:CRL>
      </sc:CRLs>
      <sc:OCSPs>
        <sc:OCSP>*</sc:OCSP>
      </sc:OCSPs>
    </sc:RevocationInformation>
  </OptionalOutputs>
  <SignatureObject>
    <Other>
      <sc:SignatureObjects>
        <sc:ExtendedSignatureObject WhichDocument="256">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="384">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_1">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_2">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_3">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_4">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_5">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_6">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_7">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
        <sc:ExtendedSignatureObject WhichDocument="512_8">
          <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
        </sc:ExtendedSignatureObject>
      </sc:SignatureObjects>
    </Other>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="UserAlert Mobile ID 4"><con:settings/><con:config><script>def alert = com.eviware.soapui.support.UISupport;
if (testRunner.testCase.testSuite.getPropertyValue("USER_ALERT") == "true" ) {
	def myMSISDN = testRunner.testCase.testSuite.getPropertyValue("MSISDN");
	alert.showInfoMessage("Please first click OK and then proceed the Mobile ID Request on your Mobile $myMSISDN")
}</script></con:config></con:testStep><con:testStep type="request" name="OnDemand MID ADV Batch [asyn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand MID ADV Batch [asyn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/batchprocessing</AdditionalProfile>
               <AdditionalProfile>urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
                  <sc:StepUpAuthorisation>
                     <sc:MobileID Type="http://ais.swisscom.ch/1.0/auth/mobileid/1.0">
                        <sc:MSISDN>${#TestSuite#MSISDN}</sc:MSISDN>
                        <sc:Message>10: OnDemand MID ADV Batch [asyn]</sc:Message>
                        <sc:Language>En</sc:Language>
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash ID="256">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="384">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA384}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_384}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_1">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_2">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_3">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_4">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_5">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_6">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_7">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
               <DocumentHash ID="512_8">
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA512}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_512}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:resultmajor:Pending</ResultMajor>
  </Result>
  <OptionalOutputs>
    <async:ResponseID>*</async:ResponseID>
  </OptionalOutputs>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Transfer ResponseID"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>Poll Pending</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>OnDemand MID ADV Batch [asyn]</con:sourceStep><con:sourcePath>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:OptionalOutputs/async:ResponseID</con:sourcePath><con:targetType>Request</con:targetType><con:targetStep>Poll RequestID (Pending)</con:targetStep><con:targetPath>declare namespace soap="http://schemas.xmlsoap.org/soap/envelope/" 
declare namespace async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" 
declare namespace xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
declare namespace ais="http://service.ais.swisscom.com/"
//soap:Envelope/soap:Body/ais:pending/async:PendingRequest/xmlns:OptionalInputs/async:ResponseID</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>Poll Final</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>OnDemand MID ADV Batch [asyn]</con:sourceStep><con:sourcePath>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:OptionalOutputs/async:ResponseID</con:sourcePath><con:targetType>Request</con:targetType><con:targetStep>Poll RequestID (Final)</con:targetStep><con:targetPath>declare namespace soap="http://schemas.xmlsoap.org/soap/envelope/" 
declare namespace async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" 
declare namespace xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
declare namespace ais="http://service.ais.swisscom.com/"
//soap:Envelope/soap:Body/ais:pending/async:PendingRequest/xmlns:OptionalInputs/async:ResponseID</con:targetPath></con:transfers></con:config></con:testStep><con:testStep type="delay" name="Poll Delay 1"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="request" name="Poll RequestID (Pending)"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Poll RequestID (Pending)"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/">
   <soap:Body>
      <ais:pending>
         <async:PendingRequest Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <async:ResponseID>1ccc3dfc-0db7-465b-a1eb-d630ded081b7</async:ResponseID>
            </OptionalInputs>
         </async:PendingRequest>
      </ais:pending>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Check-If-Pending 1"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Check-If-Ready</con:name><con:type>XPATH</con:type><con:expression>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
matches(//xmlns:ResultMajor/text(),'Pending')</con:expression><con:targetStep>Poll Delay 1</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="request" name="Poll RequestID (Final)"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="Poll RequestID (Final)"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/">
   <soap:Body>
      <ais:pending>
         <async:PendingRequest Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}</Name>
               </ClaimedIdentity>
               <async:ResponseID>1ccc3dfc-0db7-465b-a1eb-d630ded081b7</async:ResponseID>
            </OptionalInputs>
         </async:PendingRequest>
      </ais:pending>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:pendingResponse</path><content><![CDATA[<ais:pendingResponse xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Response xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Result>
      <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
    </Result>
    <OptionalOutputs>
      <sc:MobileIDAPTransID>*</sc:MobileIDAPTransID>
      <sc:MobileIDSerialNumber>${#TestSuite#_tmp_MIDSerialNumber}</sc:MobileIDSerialNumber>
    <sc:RevocationInformation>
      <sc:CRLs>
        <sc:CRL>*</sc:CRL>
      </sc:CRLs>
      <sc:OCSPs>
        <sc:OCSP>*</sc:OCSP>
      </sc:OCSPs>
    </sc:RevocationInformation>
    </OptionalOutputs>
    <SignatureObject>
      <Other>
        <sc:SignatureObjects>
          <sc:ExtendedSignatureObject WhichDocument="256">
            <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
          </sc:ExtendedSignatureObject>
          <sc:ExtendedSignatureObject WhichDocument="384">
            <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
          </sc:ExtendedSignatureObject>
          <sc:ExtendedSignatureObject WhichDocument="512_1">
            <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
          </sc:ExtendedSignatureObject>
          <sc:ExtendedSignatureObject WhichDocument="512_2">
            <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
          </sc:ExtendedSignatureObject>
          <sc:ExtendedSignatureObject WhichDocument="512_3">
            <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
          </sc:ExtendedSignatureObject>
          <sc:ExtendedSignatureObject WhichDocument="512_4">
            <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
          </sc:ExtendedSignatureObject>
          <sc:ExtendedSignatureObject WhichDocument="512_5">
            <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
          </sc:ExtendedSignatureObject>
          <sc:ExtendedSignatureObject WhichDocument="512_6">
            <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
          </sc:ExtendedSignatureObject>
          <sc:ExtendedSignatureObject WhichDocument="512_7">
            <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
          </sc:ExtendedSignatureObject>
          <sc:ExtendedSignatureObject WhichDocument="512_8">
            <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
          </sc:ExtendedSignatureObject>
        </sc:SignatureObjects>
      </Other>
    </SignatureObject>
  </Response>
</ais:pendingResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="UserAlert Mobile ID 5"><con:settings/><con:config><script>def alert = com.eviware.soapui.support.UISupport;
if (testRunner.testCase.testSuite.getPropertyValue("USER_ALERT") == "true" ) {
	def myMSISDN = testRunner.testCase.testSuite.getPropertyValue("MSISDN");
	alert.showInfoMessage("Please first click OK and then proceed the Mobile ID Request on your Mobile $myMSISDN")
}

</script></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MID SerialNumber"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MID SerialNumber"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope 
   xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
   xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
   xmlns:ais="http://service.ais.swisscom.com/" 
   xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" 
   xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" 
                      Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
                  <sc:StepUpAuthorisation>
                     <sc:MobileID Type="http://ais.swisscom.ch/1.0/auth/mobileid/1.0">
                        <sc:MSISDN>${#TestSuite#MSISDN}</sc:MSISDN>
                        <sc:Message>10: OnDemand ADV MID SerialNumber</sc:Message>
                        <sc:Language>eN</sc:Language>
                        <sc:SerialNumber>${#TestSuite#_tmp_MIDSerialNumber}</sc:SerialNumber>
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Depth="ALL" Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</ResultMajor>
  </Result>
  <OptionalOutputs>
    <sc:MobileIDAPTransID>*</sc:MobileIDAPTransID>
    <sc:MobileIDSerialNumber>*</sc:MobileIDSerialNumber>
    <sc:RevocationInformation>
      <sc:CRLs>
        <sc:CRL>*</sc:CRL>
      </sc:CRLs>
      <sc:OCSPs>
        <sc:OCSP>*</sc:OCSP>
      </sc:OCSPs>
    </sc:RevocationInformation>
  </OptionalOutputs>
  <SignatureObject>
    <Base64Signature Type="urn:ietf:rfc:3369">*</Base64Signature>
  </SignatureObject>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="11 SOAP OnDemand MID [Error]" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="245cd2c1-2c10-48a0-8bbc-353d865d23d8"><con:settings/><con:testStep type="request" name="OnDemand ADV MID 41000092101 WRONG_PARAM [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MID 41000092101 WRONG_PARAM [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
                  <sc:StepUpAuthorisation>
                     <sc:MobileID Type="http://ais.swisscom.ch/1.0/auth/mobileid/1.0">
                        <sc:MSISDN>41000092101</sc:MSISDN>
                        <sc:Message>THIS TEXT SHOULD NOT BE SENT TO THE MOBILE</sc:Message>
                        <sc:Language>EN</sc:Language>
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>http://ais.swisscom.ch/1.0/resultmajor/SubsystemError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/subsystem/MobileID/service</ResultMinor>
    <ResultMessage xml:lang="en">mss:_101</ResultMessage>
  </Result>
  <OptionalOutputs>
    <sc:MobileIDFault>
      <sc:Subcode xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#">mss:_101</sc:Subcode>
      <sc:Reason>WRONG_PARAM</sc:Reason>
      <sc:Detail>
        <sc:detail>Error among the arguments of the request</sc:detail>
      </sc:Detail>
    </sc:MobileIDFault>
  </OptionalOutputs>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MID 41000092102 MISSING_PARAM [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MID 41000092102 MISSING_PARAM [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
                  <sc:StepUpAuthorisation>
                     <sc:MobileID Type="http://ais.swisscom.ch/1.0/auth/mobileid/1.0">
                        <sc:MSISDN>41000092102</sc:MSISDN>
                        <sc:Message>THIS TEXT SHOULD NOT BE SENT TO THE MOBILE</sc:Message>
                        <sc:Language>EN</sc:Language>
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>http://ais.swisscom.ch/1.0/resultmajor/SubsystemError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/subsystem/MobileID/service</ResultMinor>
    <ResultMessage xml:lang="en">mss:_102</ResultMessage>
  </Result>
  <OptionalOutputs>
    <sc:MobileIDFault>
      <sc:Subcode xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#">mss:_102</sc:Subcode>
      <sc:Reason>MISSING_PARAM</sc:Reason>
      <sc:Detail>
        <sc:detail>An argument in the request is missing</sc:detail>
      </sc:Detail>
    </sc:MobileIDFault>
  </OptionalOutputs>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MID 41000092103 WRONG_DATA_LENGTH [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MID 41000092103 WRONG_DATA_LENGTH [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
                  <sc:StepUpAuthorisation>
                     <sc:MobileID Type="http://ais.swisscom.ch/1.0/auth/mobileid/1.0">
                        <sc:MSISDN>41000092103</sc:MSISDN>
                        <sc:Message>THIS TEXT SHOULD NOT BE SENT TO THE MOBILE</sc:Message>
                        <sc:Language>EN</sc:Language>
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>http://ais.swisscom.ch/1.0/resultmajor/SubsystemError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/subsystem/MobileID/service</ResultMinor>
    <ResultMessage xml:lang="en">mss:_103</ResultMessage>
  </Result>
  <OptionalOutputs>
    <sc:MobileIDFault>
      <sc:Subcode xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#">mss:_103</sc:Subcode>
      <sc:Reason>WRONG_DATA_LENGTH</sc:Reason>
      <sc:Detail>
        <sc:detail>The DataToBeSigned are too large. Limitations are due to the Mobile Signature technology implemented by the MSSP</sc:detail>
      </sc:Detail>
    </sc:MobileIDFault>
  </OptionalOutputs>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MID WrongTypeAttr [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MID WrongTypeAttr [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
                  <sc:StepUpAuthorisation>
                     <sc:MobileID Type="urn:swisscom:auth:mobileid:v1.x">
                        <sc:MSISDN>${#TestSuite#MSISDN}</sc:MSISDN>
                        <sc:Message>THIS TEXT SHOULD NOT BE SENT TO THE MOBILE</sc:Message>
                        <sc:Language>eN</sc:Language>
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
  <ResultMessage xml:lang="en">Unknown &lt;MobileID> type 'urn:swisscom:auth:mobileid:v1.x'</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MID MissingTypeAttr [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MID MissingTypeAttr [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
                  <sc:StepUpAuthorisation>
                     <sc:MobileID>
                        <sc:MSISDN>${#TestSuite#MSISDN}</sc:MSISDN>
                        <sc:Message>THIS TEXT SHOULD NOT BE SENT TO THE MOBILE</sc:Message>
                        <sc:Language>eN</sc:Language>
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/InsufficientData</ResultMinor>
    <ResultMessage xml:lang="en">&lt;MobileID> type is missing</ResultMessage>
  </Result>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand QUA MID MissingLangElement [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand QUA MID MissingLangElement [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_QUALIFIED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
                  <sc:StepUpAuthorisation>
                     <sc:MobileID Type="http://ais.swisscom.ch/1.0/auth/mobileid/1.0">
                        <sc:MSISDN>${#TestSuite#MSISDN}</sc:MSISDN>
                        <sc:Message>THIS TEXT SHOULD NOT BE SENT TO THE MOBILE</sc:Message>
                        <!--<sc:Language>EN</sc:Language>-->
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/InsufficientData</ResultMinor>
  <ResultMessage xml:lang="en">Element &lt;Language> is missing</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MID MissingDN [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MID MissingDN [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <!--<sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>-->
                  <sc:StepUpAuthorisation>
                     <sc:MobileID Type="http://ais.swisscom.ch/1.0/auth/mobileid/1.0">
                        <sc:MSISDN>${#TestSuite#MSISDN}</sc:MSISDN>
                        <sc:Message>THIS TEXT SHOULD NOT BE SENT TO THE MOBILE</sc:Message>
                        <sc:Language>eN</sc:Language>
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse/xmlns:Result</path><content><![CDATA[<Result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
  <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/InsufficientData</ResultMinor>
  <ResultMessage xml:lang="en">Element &lt;DistinguishedName> is missing</ResultMessage>
</Result>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MID MissingC [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MID MissingC [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
                  <sc:StepUpAuthorisation>
                     <sc:MobileID Type="http://ais.swisscom.ch/1.0/auth/mobileid/1.0">
                        <sc:MSISDN>${#TestSuite#MSISDN}</sc:MSISDN>
                        <sc:Message>THIS TEXT SHOULD NOT BE SENT TO THE MOBILE</sc:Message>
                        <sc:Language>EN</sc:Language>
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
    <ResultMessage xml:lang="en">distinguished name is missing required RDN 'countryname' or 'C'</ResultMessage>
  </Result>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MID MissingCN [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MID MissingCN [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>c=CH</sc:DistinguishedName>
                  <sc:StepUpAuthorisation>
                     <sc:MobileID Type="http://ais.swisscom.ch/1.0/auth/mobileid/1.0">
                        <sc:MSISDN>${#TestSuite#MSISDN}</sc:MSISDN>
                        <sc:Message>THIS TEXT SHOULD NOT BE SENT TO THE MOBILE</sc:Message>
                        <sc:Language>EN</sc:Language>
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
    <ResultMessage xml:lang="en">distinguished name is missing required RDN 'commonName' or 'CN'</ResultMessage>
  </Result>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MID InvalidC [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MID InvalidC [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=xxx, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
                  <sc:StepUpAuthorisation>
                     <sc:MobileID Type="http://ais.swisscom.ch/1.0/auth/mobileid/1.0">
                        <sc:MSISDN>${#TestSuite#MSISDN}</sc:MSISDN>
                        <sc:Message>THIS TEXT SHOULD NOT BE SENT TO THE MOBILE</sc:Message>
                        <sc:Language>EN</sc:Language>
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
    <ResultMessage xml:lang="en">distinguished name RDN 'C' value must be exactly two characters long</ResultMessage>
  </Result>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MID WrongC [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MID WrongC [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=$$, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
                  <sc:StepUpAuthorisation>
                     <sc:MobileID Type="http://ais.swisscom.ch/1.0/auth/mobileid/1.0">
                        <sc:MSISDN>${#TestSuite#MSISDN}</sc:MSISDN>
                        <sc:Message>THIS TEXT SHOULD NOT BE SENT TO THE MOBILE</sc:Message>
                        <sc:Language>EN</sc:Language>
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/UnexpectedData</ResultMinor>
    <ResultMessage xml:lang="en">distinguished name could not be parsed</ResultMessage>
  </Result>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="UserAlert CANCEL Mobile ID 1"><con:settings/><con:config><script>def alert = com.eviware.soapui.support.UISupport;
if (testRunner.testCase.testSuite.getPropertyValue("USER_ALERT") == "true" ) {
	def myMSISDN = testRunner.testCase.testSuite.getPropertyValue("MSISDN");
	alert.showInfoMessage("Please first click OK and then proceed the Mobile ID Request on your Mobile $myMSISDN\nPLEASE >>> CANCEL &lt;&lt;&lt; THE REQUEST ON YOUR MOBILE")
}</script></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MID Cancelled [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MID Cancelled [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
                  <sc:StepUpAuthorisation>
                     <sc:MobileID Type="http://ais.swisscom.ch/1.0/auth/mobileid/1.0">
                        <sc:MSISDN>${#TestSuite#MSISDN}</sc:MSISDN>
                        <sc:Message>11: OnDemand ADV MID Cancelled [syn] - Please CANCEL this message!</sc:Message>
                        <sc:Language>EN</sc:Language>
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>http://ais.swisscom.ch/1.0/resultmajor/SubsystemError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/subsystem/MobileID/service</ResultMinor>
    <ResultMessage xml:lang="en">mss:_401</ResultMessage>
  </Result>
  <OptionalOutputs>
    <sc:MobileIDFault>
      <sc:Subcode xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#">mss:_401</sc:Subcode>
      <sc:Reason>USER_CANCEL</sc:Reason>
      <sc:Detail>
        <sc:detail>User Cancelled the request</sc:detail>
      </sc:Detail>
    </sc:MobileIDFault>
  </OptionalOutputs>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="UserAlert TIMEOUT Mobile ID 1"><con:settings/><con:config><script>def alert = com.eviware.soapui.support.UISupport;
if (testRunner.testCase.testSuite.getPropertyValue("USER_ALERT") == "true" ) {
	def myMSISDN = testRunner.testCase.testSuite.getPropertyValue("MSISDN");
	alert.showInfoMessage("Please first click OK and then proceed the Mobile ID Request on your Mobile $myMSISDN\nPLEASE >>> IGNORE &lt;&lt;&lt; THE REQUEST ON YOUR MOBILE FOR AT LEAST 60 SECONDS")
}</script></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MID STKTIMEOUT 60s [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MID STKTIMEOUT 60s [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
                  <sc:StepUpAuthorisation>
                     <sc:MobileID Type="http://ais.swisscom.ch/1.0/auth/mobileid/1.0">
                        <sc:MSISDN>${#TestSuite#MSISDN}</sc:MSISDN>
                        <sc:Message>11: OnDemand ADV MID STKTIMEOUT 60s [syn] - Please IGNORE this message for at least 60 seconds</sc:Message>
                        <sc:Language>EN</sc:Language>
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>http://ais.swisscom.ch/1.0/resultmajor/SubsystemError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/subsystem/MobileID/service</ResultMinor>
    <ResultMessage xml:lang="en">mss:_208</ResultMessage>
  </Result>
  <OptionalOutputs>
    <sc:MobileIDFault>
      <sc:Subcode xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#">mss:_208</sc:Subcode>
      <sc:Reason>EXPIRED_TRANSACTION</sc:Reason>
      <sc:Detail>
        <sc:detail>Timeout waiting response</sc:detail>
      </sc:Detail>
    </sc:MobileIDFault>
  </OptionalOutputs>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="UserAlert AIRPLANE=ON Mobile ID"><con:settings/><con:config><script>def alert = com.eviware.soapui.support.UISupport;
if (testRunner.testCase.testSuite.getPropertyValue("USER_ALERT") == "true" ) {
	def myMSISDN = testRunner.testCase.testSuite.getPropertyValue("MSISDN");
	alert.showInfoMessage("Please >>> ENABLE AIRPLANE &lt;&lt;&lt; mode and click OK to continue..")
}</script></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MID Transaction-Timeout 180s (RESET) [syn]"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MID Transaction-Timeout 180s (RESET) [syn]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:ais="http://service.ais.swisscom.com/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
                  <sc:StepUpAuthorisation>
                     <sc:MobileID Type="http://ais.swisscom.ch/1.0/auth/mobileid/1.0">
                        <sc:MSISDN>${#TestSuite#MSISDN}</sc:MSISDN>
                        <sc:Message>11: OnDemand ADV MID Transaction-Timeout 180s (RESET) [syn] - Please IGNORE this message</sc:Message>
                        <sc:Language>EN</sc:Language>
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>http://ais.swisscom.ch/1.0/resultmajor/SubsystemError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/subsystem/MobileID/service</ResultMinor>
    <ResultMessage xml:lang="en">mss:_208</ResultMessage>
  </Result>
  <OptionalOutputs>
    <sc:MobileIDFault>
      <sc:Subcode xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#">mss:_208</sc:Subcode>
      <sc:Reason>EXPIRED_TRANSACTION</sc:Reason>
      <sc:Detail>
        <sc:detail>Original request timed out.</sc:detail>
      </sc:Detail>
    </sc:MobileIDFault>
  </OptionalOutputs>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="UserAlert AIRPLANE=OFF Mobile ID"><con:settings/><con:config><script>def alert = com.eviware.soapui.support.UISupport;
if (testRunner.testCase.testSuite.getPropertyValue("USER_ALERT") == "true" ) {
	def myMSISDN = testRunner.testCase.testSuite.getPropertyValue("MSISDN");
	alert.showInfoMessage("Done! Please >>> DISABLE AIRPLANE &lt;&lt;&lt; mode and WAIT 2 MINUTES TO CANCEL ANY INCOMING MID REQUESTS. THen click OK to continue..")
}</script></con:config></con:testStep><con:testStep type="groovy" name="UserAlert Mobile ID 1"><con:settings/><con:config><script>def alert = com.eviware.soapui.support.UISupport;
if (testRunner.testCase.testSuite.getPropertyValue("USER_ALERT") == "true" ) {
	def myMSISDN = testRunner.testCase.testSuite.getPropertyValue("MSISDN");
	alert.showInfoMessage("Please first click OK and then proceed the Mobile ID Request on your Mobile $myMSISDN")
}</script></con:config></con:testStep><con:testStep type="request" name="OnDemand ADV MID WrongSerialNumber"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AisSoapBinding</con:interface><con:operation>sign</con:operation><con:request name="OnDemand ADV MID WrongSerialNumber"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestSuite#BASEURL}/AIS-Server/ws</con:endpoint><con:request><![CDATA[<soap:Envelope 
   xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
   xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
   xmlns:ais="http://service.ais.swisscom.com/" 
   xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" 
   xmlns:sc="http://ais.swisscom.ch/1.0/schema">
   <soap:Body>
      <ais:sign>
         <SignRequest RequestID="${=new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")}" 
                      Profile="http://ais.swisscom.ch/1.0">
            <OptionalInputs>
               <ClaimedIdentity>
                  <Name>${#TestSuite#AP_ID}:${#TestSuite#ONDEMAND_ADVANCED}</Name>
               </ClaimedIdentity>
               <SignatureType>urn:ietf:rfc:3369</SignatureType>
               <AdditionalProfile>http://ais.swisscom.ch/1.0/profiles/ondemandcertificate</AdditionalProfile>
               <sc:CertificateRequest>
                  <sc:DistinguishedName>cn=${#TestSuite#OnDemand_CN}, o=${#TestSuite#OnDemand_O}, c=${#TestSuite#OnDemand_C}, ou=Certificate and signatures for test purpose only</sc:DistinguishedName>
                  <sc:StepUpAuthorisation>
                     <sc:MobileID Type="http://ais.swisscom.ch/1.0/auth/mobileid/1.0">
                        <sc:MSISDN>${#TestSuite#MSISDN}</sc:MSISDN>
                        <sc:Message>11: OnDemand ADV MID WrongSerialNumber</sc:Message>
                        <sc:Language>eN</sc:Language>
                        <sc:SerialNumber>MIDCHE0D9GAI7999</sc:SerialNumber>
                     </sc:MobileID>
                  </sc:StepUpAuthorisation>
               </sc:CertificateRequest>
               <AddTimestamp Type="urn:ietf:rfc:3161"/>
               <sc:AddRevocationInformation Depth="ALL" Type="BOTH"/>
            </OptionalInputs>
            <InputDocuments>
               <DocumentHash>
                  <dsig:DigestMethod Algorithm="${#TestSuite#SHA256}"/>
                  <dsig:DigestValue>${#TestSuite#DIGEST_256}</dsig:DigestValue>
               </DocumentHash>
            </InputDocuments>
         </SignRequest>
      </ais:sign>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace ais='http://service.ais.swisscom.com/';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';

//soap:Envelope/soap:Body/ais:signResponse/xmlns:SignResponse</path><content><![CDATA[<SignResponse xsi:type="SignResponse" RequestID="*" Profile="http://ais.swisscom.ch/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:oasis:names:tc:dss:1.0:core:schema" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0" xmlns:ais="http://service.ais.swisscom.com/" xmlns:sc="http://ais.swisscom.ch/1.0/schema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <Result>
    <ResultMajor>http://ais.swisscom.ch/1.0/resultmajor/SubsystemError</ResultMajor>
    <ResultMinor>http://ais.swisscom.ch/1.0/resultminor/subsystem/MobileID/SerialNumberMismatch</ResultMinor>
    <ResultMessage xml:lang="en">SerialNumber mismatch. We strongly advise to go through the Pre-Signing Process in order to retrieve the actual Mobile ID SerialNumber</ResultMessage>
  </Result>
</SignResponse>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="12 RESTful OnDemand MID" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b9d7afad-fa05-4124-b631-02dfdffca3ee"><con:settings/><con:testStep type="groovy" name="UserAlert Mobile ID 1"><con:settings/><con:config><script>def alert = com.eviware.soapui.support.UISupport;
if (testRunner.testCase.testSuite.getPropertyValue("USER_ALERT") == "true" ) {
	def myMSISDN = testRunner.testCase.testSuite.getPropertyValue("MSISDN");
	alert.showInfoMessage("Please first click OK and then proceed the Mobile ID Request on your Mobile $myMSISDN")
}</script></con:config></con:testStep><con:testStep type="groovy" name="UserAlert Mobile ID 2"><con:settings/><con:config><script>def alert = com.eviware.soapui.support.UISupport;
if (testRunner.testCase.testSuite.getPropertyValue("USER_ALERT") == "true" ) {
	def myMSISDN = testRunner.testCase.testSuite.getPropertyValue("MSISDN");
	alert.showInfoMessage("Please first click OK and then proceed the Mobile ID Request on your Mobile $myMSISDN")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Validate JSON Response 1"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper

def response = context.expand( '${JSON OnDemand ADV MID [syn]#Response}' ).toString()
def slurper = new JsonSlurper()
def json = slurper.parseText response

if ( json."SignResponse"."Result"."ResultMajor" != "urn:oasis:names:tc:dss:1.0:resultmajor:Success" ) {
	testRunner.fail("ResultMajor was not successful")
	return
}

if ( json."SignResponse"."SignatureObject"."Base64Signature"."@Type" != "urn:ietf:rfc:3369" ) {
	testRunner.fail("Signature type invalid")
	return
}
	
if ( ! ( json."SignResponse"."SignatureObject"."Base64Signature"."\$" ==~ /MI.*/ ) ) {
	testRunner.fail("Signature content invalid") 
	return
}
</script></con:config></con:testStep><con:testStep type="groovy" name="UserAlert Mobile ID 3"><con:settings/><con:config><script>def alert = com.eviware.soapui.support.UISupport;
if (testRunner.testCase.testSuite.getPropertyValue("USER_ALERT") == "true" ) {
	def myMSISDN = testRunner.testCase.testSuite.getPropertyValue("MSISDN");
	alert.showInfoMessage("Please first click OK and then proceed the Mobile ID Request on your Mobile $myMSISDN")
}</script></con:config></con:testStep><con:testStep type="transfer" name="Transfer ResponseID 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>Poll Pending</con:name><con:sourceType xsi:nil="true"/><con:sourceStep xsi:nil="true"/><con:sourcePath>declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
//xmlns:SignResponse/xmlns:OptionalOutputs/async:ResponseID</con:sourcePath><con:targetType xsi:nil="true"/><con:targetStep xsi:nil="true"/><con:targetPath>declare namespace dsig="http://www.w3.org/2000/09/xmldsig#" 
declare namespace xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
declare namespace ais="http://ais.swisscom.ch/1.0/schema" 
declare namespace async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0"
//async:PendingRequest/xmlns:OptionalInputs/async:ResponseID</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>Poll Final</con:name><con:sourceType xsi:nil="true"/><con:sourceStep xsi:nil="true"/><con:sourcePath>declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
//xmlns:SignResponse/xmlns:OptionalOutputs/async:ResponseID</con:sourcePath><con:targetType xsi:nil="true"/><con:targetStep xsi:nil="true"/><con:targetPath>declare namespace dsig="http://www.w3.org/2000/09/xmldsig#" 
declare namespace xmlns="urn:oasis:names:tc:dss:1.0:core:schema" 
declare namespace ais="http://ais.swisscom.ch/1.0/schema" 
declare namespace async="urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0"
//async:PendingRequest/xmlns:OptionalInputs/async:ResponseID</con:targetPath></con:transfers></con:config></con:testStep><con:testStep type="delay" name="Poll Delay 1"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="goto" name="Check-If-Pending 1"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Check-If-Ready</con:name><con:type>XPATH</con:type><con:expression>declare namespace xmlns='urn:oasis:names:tc:dss:1.0:core:schema';
declare namespace sc='http://ais.swisscom.ch/1.0/schema';
declare namespace async='urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0';
declare namespace dsig='http://www.w3.org/2000/09/xmldsig#';
matches(//xmlns:ResultMajor/text(),'Pending')</con:expression><con:targetStep>Poll Delay 1</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="UserAlert Mobile ID 4"><con:settings/><con:config><script>def alert = com.eviware.soapui.support.UISupport;
if (testRunner.testCase.testSuite.getPropertyValue("USER_ALERT") == "true" ) {
	def myMSISDN = testRunner.testCase.testSuite.getPropertyValue("MSISDN");
	alert.showInfoMessage("Please first click OK and then proceed the Mobile ID Request on your Mobile $myMSISDN")
}</script></con:config></con:testStep><con:testStep type="transfer" name="Get ResponseID 2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>ID</con:name><con:sourceType xsi:nil="true"/><con:sourceStep xsi:nil="true"/><con:sourcePath>declare namespace xmlns='${#TestSuite#BASEURL}/AIS-Server/rs/v1.0/sign';
//xmlns:Response/xmlns:SignResponse/xmlns:OptionalOutputs/xmlns:async.ResponseID</con:sourcePath><con:targetType>_tmp</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="delay" name="Poll Delay 2"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="goto" name="Check-If-Pending 2"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Check-If-Ready</con:name><con:type>XPATH</con:type><con:expression>declare namespace xmlns='${#TestSuite#BASEURL}/AIS-Server/rs/v1.0/pending';
matches(//xmlns:ResultMajor/text(),'Pending')</con:expression><con:targetStep>Poll Delay 2</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Validate JSON Response 2"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper

def response = context.expand( '${JSON Poll RequestID (Pending)#Response}' ).toString()
def slurper = new JsonSlurper()
def json = slurper.parseText response

if ( json."SignResponse"."Result"."ResultMajor" != "urn:oasis:names:tc:dss:1.0:resultmajor:Success" ) {
	testRunner.fail("ResultMajor was not successful")
	return
}

if ( json."SignResponse"."SignatureObject"."Other"."sc.SignatureObjects"."sc.ExtendedSignatureObject"."Base64Signature"."@Type"[9] != "urn:ietf:rfc:3369" ) {
	testRunner.fail("Signature type invalid")
	return
}
	
if ( ! ( json."SignResponse"."SignatureObject"."Other"."sc.SignatureObjects"."sc.ExtendedSignatureObject"."Base64Signature"."\$"[9] ==~ /MI.*/ ) ) {
	testRunner.fail("Signature content invalid") 
	return
}
</script></con:config></con:testStep><con:testStep type="groovy" name="UserAlert Mobile ID 5"><con:settings/><con:config><script>def alert = com.eviware.soapui.support.UISupport;
if (testRunner.testCase.testSuite.getPropertyValue("USER_ALERT") == "true" ) {
	def myMSISDN = testRunner.testCase.testSuite.getPropertyValue("MSISDN");
	alert.showInfoMessage("Please first click OK and then proceed the Mobile ID Request on your Mobile $myMSISDN")
}</script></con:config></con:testStep><con:testStep type="groovy" name="UserAlert Mobile ID 6"><con:settings/><con:config><script>def alert = com.eviware.soapui.support.UISupport;
if (testRunner.testCase.testSuite.getPropertyValue("USER_ALERT") == "true" ) {
	def myMSISDN = testRunner.testCase.testSuite.getPropertyValue("MSISDN");
	alert.showInfoMessage("Please first click OK and then proceed the Mobile ID Request on your Mobile $myMSISDN")
}</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>BASEURL</con:name><con:value>https://ais.pre.swissdigicert.ch</con:value></con:property><con:property><con:name>AP_ID</con:name><con:value>cartel.ch</con:value></con:property><con:property><con:name>STATIC_ID</con:name><con:value>kp2-cartel.ch</con:value></con:property><con:property><con:name>ONDEMAND_QUALIFIED</con:name><con:value>OnDemand-Qualified</con:value></con:property><con:property><con:name>ONDEMAND_ADVANCED</con:name><con:value>OnDemand-Advanced</con:value></con:property><con:property><con:name>MSISDN</con:name><con:value>41792078937</con:value></con:property><con:property><con:name>OnDemand_CN</con:name><con:value>Philipp Haupt</con:value></con:property><con:property><con:name>OnDemand_O</con:name><con:value>Swisscom (Schweiz) AG</con:value></con:property><con:property><con:name>OnDemand_C</con:name><con:value>CH</con:value></con:property><con:property><con:name>USER_ALERT</con:name><con:value>false</con:value></con:property><con:property><con:name>SHA256</con:name><con:value>http://www.w3.org/2001/04/xmlenc#sha256</con:value></con:property><con:property><con:name>SHA384</con:name><con:value>http://www.w3.org/2001/04/xmldsig-more#sha384</con:value></con:property><con:property><con:name>SHA512</con:name><con:value>http://www.w3.org/2001/04/xmlenc#sha512</con:value></con:property><con:property><con:name>DIGEST_256</con:name><con:value>1WON4H3Hrinf7LYRNmhV6Uf7apdUvuYEsmhxAklxumA=</con:value></con:property><con:property><con:name>DIGEST_384</con:name><con:value>be5JJtVMoZqkJ3isZaBBpwXXQtV4Opqf3KtYcHacCh7fVZ1bS8VSnMnK3z9mIy1R</con:value></con:property><con:property><con:name>DIGEST_512</con:name><con:value>FsntfB/ATHb1O7HlxpB4l9L+1vkgCOki3omkM6jJVnxXDRRgd1uZ7S/GkLPkFEUJ+SDllcWWjDNJHJcnkritGg==</con:value></con:property><con:property><con:name>_tmp</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9ca84a92-28af-44e0-989e-c73de69799a5</con:value></con:property><con:property><con:name>_tmp_MIDSerialNumber</con:name><con:value>MIDCHE0D9GAI7O54</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Regression Test Suite Loop"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Run TestSuite" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Run TestSuite"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToObjectMap;
def targetTestSuite = "Regression Test Suite"

log.info "When we execute "+targetTestSuite
project = testRunner.getTestCase().testSuite.getProject()
contextMap = new StringToObjectMap( context )
project.getTestSuiteByName(targetTestSuite).run( contextMap, false )</script></con:config></con:testStep><con:loadTest name="Loop"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>1000</con:testLimit><con:limitType>COUNT</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="Benchmark"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="01 Timestamp" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="01 Timestamp 1T100"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>100</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="01 Timestamp 1T1000"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>1000</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="01 Timestamp 1T10000"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10000</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="01 Timestamp 10T10"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting><con:setting id="HttpSettings@include_request_in_time_taken">false</con:setting><con:setting id="HttpSettings@include_response_in_time_taken">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>false</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="01 Timestamp 100T10"><con:settings/><con:threadCount>100</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="01 Timestamp 500T20"><con:settings/><con:threadCount>500</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>20</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="02 Timestamp Batch10" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="02 Timestamp 1T10"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="02 Timestamp 10T10"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="03 Timestamp Batch100" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="03 Timestamp 1T10"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="03 Timestamp 10T10"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="04 Timestamp Batch1000" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="04 Timestamp 1T10"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="05 Static NoTSA NoOCSP" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="05 Static 1T100"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>100</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="05 Static 1T1000"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>1000</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="05 Static 1T10000"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10000</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="05 Static 10T10"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="05 Static 100T10"><con:settings/><con:threadCount>100</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="05 Static 500T20"><con:settings/><con:threadCount>500</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>20</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="06 Static NoTSA NoOCSP Batch10" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="06 Static 1T10"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="06 Static 10T10"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="07 Static NoTSA NoOCSP Batch100" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="07 Static 1T10"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="07 Static 10T10"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="08 Static NoTSA NoOCSP Batch1000" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="08 Static 1T10"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="09 Static +TSA NoOCSP" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="09 Static 1T1000"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>1000</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="10 Static +TSA NoOCSP Batch100" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="10 Static 1T10"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="10 Static 10T10"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="11 Static NoTSA +OCSP" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="11 Static 1T1000"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>1000</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="12 Static NoTSA +OCSP Batch100" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="12 Static 1T10"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="12 Static 10T10"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="13 Static +TSA +OCSP" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="13 Static 1T100"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>100</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="13 Static 1T1000"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>1000</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="13 Static 1T10000"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10000</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="13 Static 10T10"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="13 Static 100T10"><con:settings/><con:threadCount>100</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="13 Static 500T20"><con:settings/><con:threadCount>500</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>20</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="14 Static +TSA +OCSP Batch10" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="14 Static 1T10"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="14 Static 10T10"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="15 Static +TSA +OCSP Batch100" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="15 Static 1T10"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="15 Static 10T10"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="16 Static +TSA +OCSP Batch1000" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="16 Static 1T10"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="17 OnDemand NoTSA NoOCSP" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="17 OnDemand 1T100"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>100</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="17 OnDemand 1T1000"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>1000</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="17 OnDemand 1T10000"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10000</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="17 OnDemand 10T10"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="17 OnDemand 100T10"><con:settings/><con:threadCount>100</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="17 OnDemand 500T20"><con:settings/><con:threadCount>500</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>20</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="18 OnDemand NoTSA NoOCSP Batch10" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="18 OnDemand 1T10"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="18 OnDemand 10T10"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="19 OnDemand NoTSA NoOCSP Batch100" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="19 OnDemand 1T10"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="19 OnDemand 10T10"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="20 OnDemand NoTSA NoOCSP Batch1000" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="20 OnDemand 1T10"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="21 OnDemand +TSA NoOCSP" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="21 OnDemand 1T1000"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>1000</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="22 OnDemand +TSA NoOCSP Batch100" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="22 OnDemand 1T10"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="23 OnDemand NoTSA +OCSP" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="23 OnDemand 1T1000"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>1000</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="24 OnDemand NoTSA +OCSP Batch100" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="24 OnDemand 1T10"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="25 OnDemand +TSA +OCSP" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="25 OnDemand 1T100"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>100</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="25 OnDemand 1T1000"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>1000</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="25 OnDemand 1T10000"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10000</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="25 OnDemand 10T10"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="25 OnDemand 100T10"><con:settings/><con:threadCount>100</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="25 OnDemand 500T20"><con:settings/><con:threadCount>500</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>20</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="26 OnDemand +TSA +OCSP Batch10" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="26 OnDemand 1T10"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="26 OnDemand 10T10"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="27 OnDemand +TSA +OCSP Batch100" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="27 OnDemand 1T10"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:loadTest name="27 OnDemand 10T10"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="28 OnDemand +TSA +OCSP Batch1000" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">600000</con:setting></con:settings><con:loadTest name="28 OnDemand 1T10"><con:settings/><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>0</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>COUNT_PER_THREAD</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>0</min-requests><test-step>- Any -</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:statisticsLogFolder/><con:statisticsLogInterval>0</con:statisticsLogInterval><con:logStatisticsOnThreadChange>false</con:logStatisticsOnThreadChange><con:cancelOnReachedLimit>false</con:cancelOnReachedLimit><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>loadTestRunner.getLoadTest().getTestCase().getTestSuite().setPropertyValue( "tmp_TestRunID", "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " )
def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "Sleep " + delayMs + "ms" )
sleep( delayMs.toInteger() )
log.info( "'" +loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + "STARTED")
</con:setupScript><con:tearDownScript>def delayMs = loadTestRunner.getLoadTest().getTestCase().getTestSuite().getPropertyValue( "Delay" )
log.info( "'" + loadTestRunner.getLoadTest().getTestCase().getName() + "' >> '" + loadTestRunner.getLoadTest().getName() + "' : " + loadTestRunner.getStatus() + " | " + "EndTime " + new Date().format("HH:mm:ss") + " | " + "TimeTaken (ms) " + loadTestRunner.getTimeTaken()-delayMs.toInteger() + " | " + "Errors " + loadTestRunner.getLoadTest().getLoadTestLog().getErrorCount(loadTestRunner.getLoadTest().getTestCase().getTestStepAt(0).getLabel()))</con:tearDownScript><con:updateStatisticsPerTestStep>false</con:updateStatisticsPerTestStep></con:loadTest><con:properties/></con:testCase><con:properties><con:property><con:name>BASEURL</con:name><con:value>https://ais.pre.swissdigicert.ch</con:value></con:property><con:property><con:name>AP_ID</con:name><con:value>cartel.ch</con:value></con:property><con:property><con:name>STATIC_ID</con:name><con:value>kp2-cartel.ch</con:value></con:property><con:property><con:name>ONDEMAND_ADVANCED</con:name><con:value>OnDemand-Advanced</con:value></con:property><con:property><con:name>OnDemand_CN</con:name><con:value>Philipp Haupt</con:value></con:property><con:property><con:name>OnDemand_O</con:name><con:value>Swisscom (Schweiz) AG</con:value></con:property><con:property><con:name>OnDemand_C</con:name><con:value>CH</con:value></con:property><con:property><con:name>SHA256</con:name><con:value>http://www.w3.org/2001/04/xmlenc#sha256</con:value></con:property><con:property><con:name>DIGEST_256</con:name><con:value>1WON4H3Hrinf7LYRNmhV6Uf7apdUvuYEsmhxAklxumA=</con:value></con:property><con:property><con:name>Delay</con:name><con:value>1000</con:value></con:property><con:property><con:name>tmp_TestRunID</con:name><con:value>'15 Static +TSA +OCSP Batch100' >> '15 Static 10T10' : </con:value></con:property></con:properties></con:testSuite><con:properties/><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>